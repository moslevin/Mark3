;============================================================================
;
; This is a test of the Mark3 DCPU virtual machine, programmed in DCPU-16
; assembly language, and assembled using the DCPU Toolchain Assembler, 
; downloaded from http://dcputoolcha.in.  
;
; This code is designed to be an isolated module, which is compiled as a 
; raw binary (without linking to a kernel).  
;
; Tested and built successfully using the Mark3 DCPU VM.  This code is 
; compiled using the following command-line arguments:
;
;  dtasm -o test.o --binary --little-endian ./test1.a
;
;============================================================================
.DEFINE TERMINAL_HWI                    1
.DEFINE TERMINAL_PRINT_STRING_ROM       0

;============================================================================
; Initialization - must be first!
;============================================================================
SET PC, main

;============================================================================
; Data Section
;============================================================================
:__szHelloWorld DAT "hello world!\n", 0

;============================================================================
; Code Section
;============================================================================

;----------------------------------------------------------------------------
:print_string_rom
;----------------------------------------------------------------------------
; Function to print a string stored in ROM, specified by the user.
; Strings must be 0-terminated.  Assumes that the terminal is attached to 
; a device on HWI 1.
;
; Parameters:  
;    Register A - Pointer to a 0-terminated string to print
;
; Return:
;    None
;----------------------------------------------------------------------------
; prelude
   SET [SP], A
   SUB SP, 1
   SET C, A
   SET B, TERMINAL_PRINT_STRING_ROM
   SET A, TERMINAL_HWI
   HWI
; postlude
   ADD SP, 1
   SET A, [SP]
; return 
   ADD SP, 1
   SET PC, [SP]

;----------------------------------------------------------------------------
:main
;----------------------------------------------------------------------------
; Print "Hello World" in an infinite loop
;----------------------------------------------------------------------------
   SET A, __szHelloWorld
:main_top_of_loop
      JSR print_string_rom  
      SET PC, main_top_of_loop

