#!/bin/bash

#----------------------------------------------------------------------------
# User configurable variables
#----------------------------------------------------------------------------
SOURCE_FILES=`find -type f -and \( -name "*.c" -or -name "*.cpp" -or -name "*.cc" -or -name "*.cxx" \)`

TRIGGER_TOKEN="_CAN_HAS_DEBUG"      # Token used to check whether or not the source module
MANIFEST_FILE="dbg_file_list.h"     # Name of the header file that will contain the debug token definitions
LOGGER_HEADER="buffalogger.h"       # Name of the header file containing the debug logging macros

#----------------------------------------------------------------------------
# Global variables used in this script
#----------------------------------------------------------------------------
NEW_FILE=""
NEW_LINES=""
fileno=0

#----------------------------------------------------------------------------
# Function to generate the C code we need to define the DBG_FILE token
#----------------------------------------------------------------------------
generate_new_lines()
{
NEW_LINES="//--[Autogenerated - Do Not Modify]------------------------------------------
#include \""${MANIFEST_FILE}"\"
#include \""${LOGGER_HEADER}"\"
#if defined(DBG_FILE)
# error \"Debug logging file token already defined!  Bailing.\"
#else
# define DBG_FILE ${NEW_FILE}
#endif
//--[End Autogenerated content]----------------------------------------------"    
}

#----------------------------------------------------------------------------
# Beginning of script
#----------------------------------------------------------------------------

#cd ~/mark3/trunk/

# Enumerate a list of interesting source files to look at in our path, starting with
# the current working directory.

# Create a C header file, which we'll use to store resulting file token mappings
echo "#pragma once" > ${MANIFEST_FILE}
echo "// Autogenerated -- do not modify!" >> ${MANIFEST_FILE}

#----------------------------------------------------------------------------
# Iterate through each file in the list, and find those that look like they're 
# suppoosed to leverage our functionality.
for SOURCE_FILE in ${SOURCE_FILES}; do
    IFS='
'
    echo ${fileno} : ${SOURCE_FILE}
    NEW_FILE=`echo ${SOURCE_FILE} | tr [a-z] [A-Z]`
    NEW_FILE=_DBG_${NEW_FILE//[-\.'/'+]/_}

    # Check to see if this file is asking for us to manage its debug tokens
    DBG_COOKIE_EXIST=`grep -c "#define ${TRIGGER_TOKEN}" ${SOURCE_FILE}`
    if [ "0" == "${DBG_COOKIE_EXIST}" ]; then
        echo "ignoring file: ${SOURCE_FILE}"
        continue
    fi

    # Check to see whether or not a previous debug token exists
    DBG_COOKIE_EXIST=`grep -c "# define DBG_FILE" ${SOURCE_FILE}`
    echo ${DBG_COOKIE_EXIST}

    # if the cookie doesn't exist, add the autogenerated cookie code to the
    # source file.
    if [ "0" == "${DBG_COOKIE_EXIST}" ]; then       
        # File needs a debug cookie header, figure out *where* in the file to put it.        
        INSERT_POINT=`egrep -i "#define ${TRIGGER_TOKEN}" -n -m1 ${SOURCE_FILE}`     

        # Generate code to insert into the source
        generate_new_lines   

        if [ "" == "${INSERT_POINT}" ]; then
        # Insert at beginning of the file        
            FILE_CONTENTS=`cat ${SOURCE_FILE}`
            IFS=' '
            echo "${NEW_LINES}" > ${SOURCE_FILE}
            echo "${FILE_CONTENTS}" >> ${SOURCE_FILE}
        else
        # Insert somewhere in the middle of a file
            INSERT_LINE=${INSERT_POINT%%:*}
            FILE_FIRST_LINES=`head -n ${INSERT_LINE} ${SOURCE_FILE}`
            TOTAL_LINES=`wc -l ${SOURCE_FILE}`
            TOTAL_LINES=${TOTAL_LINES%% *}

            LAST_LINE_COUNT=`expr ${TOTAL_LINES} - ${INSERT_LINE}`
            FILE_LAST_LINES=`tail -n ${LAST_LINE_COUNT} ${SOURCE_FILE}`
            
            echo "${FILE_FIRST_LINES}" > ${SOURCE_FILE}
            echo "${NEW_LINES}" >> ${SOURCE_FILE}
            echo "${FILE_LAST_LINES}" >> ${SOURCE_FILE}
        fi
    else
        echo "file already exists"
        # ToDo: Replace the text block...
    fi

    # Insert the new file number macro in the manifest
    echo "#define ${NEW_FILE}     (${fileno})" >> ${MANIFEST_FILE}
    ((fileno++))
    
done 

# Add a clean, blank line at the end of the debug manifest file.
echo "" >> ${MANIFEST_FILE}

